Trie树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），
所以经常被搜索引擎系统用于文本词频统计。
它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较。
Trie的核心思想是空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。

前缀树的3个基本性质：

根节点不包含字符，除根节点外每一个节点都只包含一个字符。
从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。
每个节点的所有子节点包含的字符都不相同。



Relational databases are used for storage in the high-level design. However, fetching the top
5 search queries from a relational database is inefficient. The data structure trie (prefix tree) is
used to overcome the problem. As trie data structure is crucial for the system, we will
dedicate significant time to design a customized trie. Please note that some of the ideas are
from articles [2] and [3].

Trie (pronounced “try”) is a tree-like data structure that can compactly store strings. The
name comes from the word retrieval, which indicates it is designed for string retrieval
operations. The main idea of trie consists of the following:
• A trie is a tree-like data structure.
• The root represents an empty string.
• Each node stores a character and has 26 children, one for each possible character. To
save space, we do not draw empty links.
• Each tree node represents a single word or a prefix string.

How does autocomplete work with trie? Before diving into the algorithm, let us define some
terms.
• p: length of a prefix
• n: total number of nodes in a trie
• c: number of children of a given node

Steps to get top k most searched queries are listed below:
1. Find the prefix. Time complexity: O(p).
2. Traverse the subtree from the prefix node to get all valid children. A child is valid if it
can form a valid query string. Time complexity: O(c)
3. Sort the children and get top k. Time complexity: O(clogc)


