 OAuth provides a method for clients to access a protected resource on    behalf of a resource owner.  In the general case, before a client can    access a protected resource, it must first obtain an authorization    grant from the resource owner and then exchange the authorization
   grant for an access token.  The access token represents the grant's    scope, duration, and other attributes granted by the authorization    grant.  The client accesses the protected resource by presenting the    access token to the resource server.  In some cases, a client can
   directly present its own credentials to an authorization server to    obtain an access token without having to first obtain an    authorization grant from a resource owner.

   The access token provides an abstraction, replacing different    authorization constructs (e.g., username and password, assertion) for    a single token understood by the resource server.  This abstraction    enables issuing access tokens valid for a short time period, as well
   as removing the resource server's need to understand a wide range of    authentication schemes.

     +--------+                               +---------------+
     |        |--(A)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(B)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(C)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(D)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(E)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(F)--- Protected Resource ---|               |
     +--------+                               +---------------+

                     Figure 1: Abstract Protocol Flow

   When sending the access token in the "Authorization" request header    field defined by HTTP/1.1 [RFC2617], the client uses the "Bearer"    authentication scheme to transmit the access token. 
   For example:

     GET /resource HTTP/1.1
     Host: server.example.com
     Authorization: Bearer mF_9.B5f-4.1JqM

      Clients SHOULD make authenticated requests with a bearer token using    the "Authorization" request header field with the "Bearer" HTTP    authorization scheme.  Resource servers MUST support this method.

  For example, the client makes the following HTTP request using transport-layer security:

     POST /resource HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     access_token=mF_9.B5f-4.1JqM

    For example, the client makes the following HTTP request using transport-layer security:

   https://server.example.com/resource?access_token=mF_9.B5f-4.1JqM&p=q

   Because of the security weaknesses associated with the URI method    (see Section 5), including the high likelihood that the URL    containing the access token will be logged, it SHOULD NOT be used    unless it is impossible to transport the access token in the
   "Authorization" request header field or the HTTP request entity-body.    Resource servers MAY support this method.

  For example, in response to a protected resource request without
   authentication:

     HTTP/1.1 401 Unauthorized
     WWW-Authenticate: Bearer realm="example"

  And in response to a protected resource request with an    authentication attempt using an expired access token:

     HTTP/1.1 401 Unauthorized
     WWW-Authenticate: Bearer realm="example",
                       error="invalid_token",
                       error_description="The access token expired"

    When a request fails, the resource server responds using the    appropriate HTTP status code (typically, 400, 401, 403, or 405) and    includes one of the following error codes in the response:

   invalid_request
         The request is missing a required parameter, includes an          unsupported parameter or parameter value, repeats the same          parameter, uses more than one method for including an access          token, or is otherwise malformed.  The resource server SHOULD
         respond with the HTTP 400 (Bad Request) status code. 
   invalid_token
         The access token provided is expired, revoked, malformed, or          invalid for other reasons.  The resource SHOULD respond with          the HTTP 401 (Unauthorized) status code.  The client MAY
         request a new access token and retry the protected resource          request.

   insufficient_scope
         The request requires higher privileges than provided by the          access token.  The resource server SHOULD respond with the HTTP          403 (Forbidden) status code and MAY include the "scope"          attribute with the scope necessary to access the protected
         resource.


  
   Typically, a bearer token is returned to the client as part of an    OAuth 2.0 [RFC6749] access token response.  An example of such a    response is:

     HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "access_token":"mF_9.B5f-4.1JqM",
       "token_type":"Bearer",
       "expires_in":3600,
       "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA"
     }


     




     
